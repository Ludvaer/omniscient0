cases = [[500,100],[0,1000],[10,10],[50,200]]

def monotonic_fit(data)
  xs, ys = data.transpose

  # Sort y values descending, assign them to xs (already sorted)
  sorted_ys = ys.sort.reverse

  realigned_data = xs.zip(sorted_ys)

  return realigned_data
end

def soft_logit(y, epsilon = 1e-12)
  y = [[y, epsilon].max, 1 - epsilon].min
  return Math.log((1 - y) / y)
  # -Math.tan((y+ 0.5)*Math::PI)
end

def fit_weighted_sigmoid(xy_data)
  xy_data = monotonic_fit(xy_data)
  s_w  = 0# ws.sum
  s_x  = 0# ws.zip(x_data).map { |w, x| w * x }.sum
  s_z  = 0#  ws.zip(zs).map     { |w, z| w * z }.sum
  s_xx = 0#  ws.zip(x_data).map { |w, x| w * x * x }.sum
  s_xz = 0#  ws.zip(x_data.zip(zs)).map { |w, (x, z)| w * x * z }.sum

  xy_data.each do |x,y|
    z = soft_logit(y) #   Math.log((1 - y) / y) = ln(1-y) - ln (y)
    w = 1.0 / (1.0 + z**2)  # 1 / (1 +   Math.log**2((1 - y) / y))
    wxz = 1.0 / (1.0/z + z)
    s_w += w
    s_x += w * x
    s_z += wxz # w * z
    s_xx += w * x * x
    s_xz += wxz * x  # w * z * x
  end

  denom = s_w * s_xx - s_x * s_x + 1
  a = (s_w * s_xz - s_x * s_z + 1) / denom
  c = (s_z - a * s_x) / s_w
  b = -c / a
  # return a, b
  # ax + c = 0
  mean = -c / a
  slope = -a/Math::PI
  return [mean, slope]
end

def estimate_sigmoid(y_by_x)
  y_by_x = monotonic_fit(y_by_x)
  s_w  = 0# ws.sum
  s_x  = 0# ws.zip(x_data).map { |w, x| w * x }.sum
  s_z  = 0#  ws.zip(zs).map     { |w, z| w * z }.sum
  s_xx = 0#  ws.zip(x_data).map { |w, x| w * x * x }.sum
  s_xz = 0#  ws.zip(x_data.zip(zs)).map { |w, (x, z)| w * x * z }.sum
  y_by_x.each_cons(2) do |(x1,y1),(x2,y2)|
    ss = (y2 - y1)/(x2-x1).abs
    (x1..x2 - 1).each do |xx|
      x = xx
      y = y1 + (x-x1)*ss
      y = (y2-y1).abs > 1e-16 ? [y1,y2].min + (y - [y1,y2].min)**2/(y2-y1).abs : y
      z = soft_logit(y) #   Math.log((1 - y) / y) = ln(1-y) - ln (y)
      wmult = (y2 - y1 + 1) / (x2 - x1 + 1).abs
      w =   wmult/ (1.0 + z**2)
      wxz = wmult / (z + 1.0 / z)
      s_w += w
      s_x += w * x
      s_z += wxz # w * z
      s_xx += w * x * x
      s_xz += wxz * x  # w * z * x
      # puts [x,y,w, w * x,wxz,w * x * x,wxz * x ].to_s
    end
  end
  denom = s_w * s_xx - s_x * s_x + 1e-15
  a = (s_w * s_xz - s_x * s_z + 1e-15) / denom
  c = (s_z - a * s_x) / s_w
  mean = -c / a
  slope = -a/Math::PI
  return [mean, slope,s_w,s_x,s_z,s_xx,s_xz]
end

# Box-Muller transform to generate normal distribution values
def generate_normal(mean, std_dev)
  u1 = rand
  u2 = rand
  z0 = Math.sqrt(-2.0 * Math.log(u1)) * Math.cos(2.0 * Math::PI * u2)
  z0 * std_dev + mean
end

def normal_pdf(x, mean, std_dev)
  coefficient = 1.0 / (std_dev * Math.sqrt(2 * Math::PI))
  exponent = -((x - mean)**2) / (2 * std_dev**2)
  coefficient * Math.exp(exponent)
end

# Approximate error function (erf) using Abramowitz and Stegun formula
def erf(x)
  # constants
  a1 =  0.254829592
  a2 = -0.284496736
  a3 =  1.421413741
  a4 = -1.453152027
  a5 =  1.061405429
  p  =  0.3275911

  sign = x < 0 ? -1 : 1
  x = x.abs

  t = 1.0 / (1.0 + p * x)
  y = 1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * Math.exp(-x * x)

  sign * y
end

# CDF for normal distribution
def normal_cdf(x, mean, std_dev)
  z = (x - mean) / (std_dev * Math.sqrt(2.0))
  0.5 * (1.0 + erf(z))
end

cases.each do |mean, std_dev|
  mean *= 1.0
  std_dev *= 1.0
  values = [[0,1]]
  # Generate and print normal values for x from 1 to 100_000
  sum = 0
  (1..1000).each do |x|
    normal_value = normal_cdf(x, mean, std_dev)
    values.append([x,1 - normal_value])
  end
  values.append([1001,0])
  pick_service = PickWordInSetService.new({})
  sigmoid = pick_service.guesstimate_sigmoid(values)
  better_sigmoid = fit_weighted_sigmoid(values)
  ebs = estimate_sigmoid(values)
  slope = -Math.sqrt(2)/(Math.sqrt(Math::PI)*std_dev)
  puts "#{[mean,slope].to_s} <=> #{sigmoid.to_s} <=> #{better_sigmoid.to_s}  <> #{ebs.to_s}"
end

values1 = [[0, 1.0], [1, 0.9999999995], [2, 0.9999999995], [3, 0.9999999995], [4, 0.9999999990000001], [5, 0.79999999988], [6, 0.9999999990000001], [7, 0.9999999990000001], [8, 0.9999999990000001], [9, 0.9999999990000001], [10, 0.9999999990000001], [11, 0.8333333332222223], [12, 0.8571428570408163], [13, 0.9999999990000001], [14, 0.9999999990000001], [15, 0.9999999995], [16, 0.9999999990000001], [17, 0.8333333332222223], [18, 0.9999999990000001], [19, 0.9999999990000001], [20, 0.6666666666111111], [21, 0.6666666666111111], [22, 0.749999999875], [23, 0.9999999990000001], [24, 0.9999999990000001], [25, 0.9999999990000001], [26, 0.9999999990000001], [27, 0.9999999990000001], [28, 0.9999999990000001], [29, 0.9999999990000001], [30, 0.9999999990000001], [31, 0.9999999990000001], [32, 0.9999999990000001], [33, 0.9999999990000001], [34, 0.9999999990000001], [35, 0.9999999990000001], [36, 0.9999999990000001], [37, 0.9999999990000001], [38, 0.9999999990000001], [39, 0.9999999990000001], [40, 0.9999999990000001], [41, 0.79999999988], [42, 0.9999999990000001], [43, 0.9999999990000001], [44, 0.9999999990000001], [45, 0.9999999990000001], [46, 0.9999999990000001], [47, 0.9999999990000001], [48, 0.9999999990000001], [49, 0.9999999990000001], [50, 0.9999999990000001], [51, 0.9999999990000001], [52, 0.9999999990000001], [53, 0.9999999990000001], [54, 0.9999999990000001], [55, 0.9999999990000001], [56, 0.9999999990000001], [57, 0.9999999990000001], [58, 0.9999999990000001], [59, 0.9999999990000001], [60, 0.9999999990000001], [61, 0.9999999990000001], [62, 0.9999999990000001], [63, 0.9999999990000001], [64, 0.9999999990000001], [65, 0.9999999990000001], [66, 0.9999999990000001], [67, 0.9999999990000001], [68, 0.9999999990000001], [69, 0.9999999990000001], [70, 0.9999999990000001], [71, 0.9999999990000001], [72, 0.9999999990000001], [73, 0.9999999990000001], [74, 0.9999999990000001], [75, 0.9999999990000001], [76, 0.9999999990000001], [77, 0.9999999990000001], [78, 0.9999999990000001], [79, 0.9999999990000001], [81, 0.6666666665555555], [82, 0.9999999990000001], [83, 0.9999999990000001], [84, 0.9999999990000001], [85, 0.9999999990000001], [86, 0.9999999990000001], [87, 0.9999999990000001], [89, 0.9999999990000001], [90, 0.9999999990000001], [91, 0.9999999990000001], [92, 0.9999999990000001], [93, 0.9999999990000001], [94, 0.9999999990000001], [95, 0.9999999990000001], [96, 0.9999999990000001], [97, 0.5], [98, 0.9999999990000001], [99, 0.9999999990000001], [100, 0.9999999990000001], [101, 0.9999999990000001], [102, 0.5], [103, 0.9999999990000001], [104, 0.9999999990000001], [105, 0.9999999990000001], [106, 0.9999999990000001], [107, 0.9999999990000001], [108, 0.9999999990000001], [109, 0.9999999990000001], [110, 0.33333333344444444], [111, 0.5], [112, 0.5], [113, 0.9999999990000001], [114, 0.9999999990000001], [115, 0.9999999990000001], [116, 0.9999999990000001], [117, 0.5], [118, 0.9999999990000001], [119, 0.9999999990000001], [120, 0.9999999990000001], [122, 0.9999999990000001], [124, 0.9999999990000001], [125, 9.999999980000002e-10], [125, 0.9999999990000001], [126, 0.9999999990000001], [127, 0.9999999990000001], [140, 0.5], [316, 0.9999999990000001], [391, 0.9999999990000001], [404, 0.15384615389940828], [418, 0.79999999988], [439, 0.6666666665555555], [617, 1.9999999992e-10], [922, 0.9999999990000001], [930, 1.6666666661111112e-10], [968, 6.666666665777779e-11], [989, 0.9999999990000001], [1179, 9.999999980000002e-10], [1252, 0.9999999995], [1310, 0.5], [1396, 0.1764705882733564], [1490, 0.9999999990000001], [1657, 0.285714285744898], [1691, 4.999999995e-10], [1702, 0.5714285714081633], [2022, 0.9999999990000001], [2094, 0.250000000125], [2109, 8.333333331944445e-11], [2421, 0.9999999996666666], [2589, 0.749999999875], [2860, 0.07692307698816568], [2930, 0.9999999990000001], [3125, 1.2499999996875e-10], [3465, 7.69230769112426e-11], [3549, 0.14285714290816326], [3745, 4.999999995e-10], [3877, 9.999999980000002e-10], [3897, 0.59999999996], [4776, 0.11764705886851211], [5155, 0.749999999875], [5199, 0.749999999875], [5347, 0.9999999990000001], [5764, 0.20000000006000002], [6008, 0.7142857142244898], [6028, 0.79999999988], [6127, 0.5], [6406, 0.9999999996666666], [6457, 4.999999995e-10], [6572, 0.7142857142244898], [7373, 5.555555554938272e-11], [7807, 0.9999999990000001], [8388, 0.14285714290816326], [10222, 4.999999995e-10], [10290, 2.49999999875e-10], [10345, 2.49999999875e-10], [10450, 2.49999999875e-10], [12041, 0.16666666677777778], [13544, 0.11764705886851211], [14324, 1.9999999992e-10], [14339, 3.333333331111111e-10], [14392, 1.6666666661111112e-10], [14447, 1.9999999992e-10], [14488, 1.9999999992e-10], [14545, 1.9999999992e-10], [14556, 1.9999999992e-10], [14597, 1.9999999992e-10], [14608, 1.9999999992e-10], [14636, 2.49999999875e-10], [20317, 0.14285714290816326], [22145, 7.69230769112426e-11], [22240, 0.62499999996875], [23554, 9.999999980000002e-10], [25978, 4.999999995e-10], [26197, 4.999999995e-10], [26231, 9.999999980000002e-10], [26270, 4.999999995e-10], [26316, 3.333333331111111e-10], [26318, 3.333333331111111e-10], [26350, 3.333333331111111e-10], [26404, 3.333333331111111e-10], [26411, 4.999999995e-10], [26423, 9.999999980000002e-10], [26455, 9.999999980000002e-10], [26489, 3.333333331111111e-10], [26590, 3.333333331111111e-10], [26595, 0.5], [27128, 4.999999995e-10], [27435, 7.69230769112426e-11], [30722, 0.79999999988], [30786, 9.999999980000002e-10], [31126, 9.999999980000002e-10], [35785, 4.999999995e-10], [41633, 6.666666665777779e-11], [43472, 4.999999995e-10], [48383, 4.999999995e-10], [48847, 4.999999995e-10], [52648, 0.9999999990000001], [59877, 6.666666665777779e-11], [61680, 4.999999995e-10], [62377, 4.999999995e-10], [69192, 8.333333331944445e-11], [71860, 9.999999980000002e-10],  [76680, 2.49999999875e-10], [77544, 9.999999980000002e-10], [754, 9.999999980000002e-10], [77989, 0]]
values2 = [[1,1],[2,1],[3,1],[4,0.5],[5,1],[6,0.5],[7,0],[8,0],[69,0],[70,1],[71,0],[50000,0]]

[values1,values2].each do |values|
  values = monotonic_fit(values)
  puts values.to_s
  epsilon = 1e-20
  values.each do |x|
    x[1] = [[x[1], epsilon].max, 1- epsilon].min
  end
  # puts values.to_s
  pick_service = PickWordInSetService.new({})
  sigmoid =  pick_service.guesstimate_sigmoid(values)
  better_sigmoid = fit_weighted_sigmoid(values)
  ebs = estimate_sigmoid(values)
  puts "[?,>] <=> #{sigmoid.to_s} <=> #{better_sigmoid.to_s}  <> #{ebs.to_s}"
end
